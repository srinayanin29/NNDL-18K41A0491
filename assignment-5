{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"assignment-5","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMBE3gXph8UoM6LrzOrFQwg"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"iLL4zCUfbMV8"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"vyp8bYxPbPb9"},"source":["Mini Batch Gradiant Descent Algorithm.\n","\n","Develop a simple linear regression model using MBGD. Write the python code to build simple linear regression model using MBGD optimizer."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xs8IyFzEbQur","executionInfo":{"status":"ok","timestamp":1616508803418,"user_tz":-330,"elapsed":2626,"user":{"displayName":"srinayani 29","photoUrl":"","userId":"08837727420127592366"}},"outputId":"0d6d8ca9-22ba-491d-b539-06e58c73f8aa"},"source":["x=[0.2,0.4,0.6,0.8]\n","y=[2.4,3.8,4.2,4.6]\n","#step 1 initialise values\n","bs=2\n","m=1.0 \n","c=-1.0  \n","l=0.1      #Learning rate\n","epochs=100 #Maximum iterations\n","ns=len(x)\n","nb=ns//bs\n","ms=ns%bs\n","k=nb\n","if(ms>0):\n","  g_m=0\n","  g_c=0\n","  for j in range(0,ms):\n","    ind=k*bs + j\n","    g_m=g_m+((-1.0)*((y[ind]-m*x[ind]-c)*x[ind]))\n","    g_c=g_c+((-1.0)*(y[ind]-m*x[ind]-c))\n","  g_m = g_m/ms\n","  g_c= g_c/ms\n","  #find change in m , c\n","  dm = (-1.0)*l*g_m\n","  dc = (-1.0)*l*g_c\n","  #update variable \n","  m = m + dm \n","  c = c + dc\n","else:\n","  for i in range(epochs):\n","    for k in range(nb):\n","      g_m=0\n","      g_c=0\n","      for j in range(bs):\n","        ind = k*bs + j\n","        g_m = g_m+((-1.0)*((y[ind] - m*x[ind] -c)*x[ind]))\n","        g_c = g_c+((-1.0)*(y[ind] - m*x[ind] -c))\n","      g_m = g_m/bs\n","      g_c = g_c/bs\n","      #find change in m,c\n","      dm = (-1.0)*l*g_m\n","      dc = (-1.0)*l*g_c\n","      #update variable \n","      m = m + dm \n","      c = c + dc\n","#step7 print variable x1, y1\n","m= round(m,2)\n","c= round(c,2)\n","print(\"Minimum value obtained at m = {} ,c ={} for given function \".format(m,c))\n"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Minimum value obtained at m = 3.16 ,c =2.18 for given function \n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"NSqLXkAIbu-J","executionInfo":{"status":"ok","timestamp":1616508827448,"user_tz":-330,"elapsed":1248,"user":{"displayName":"srinayani 29","photoUrl":"","userId":"08837727420127592366"}},"outputId":"9ae124ce-c862-45df-b130-ed3827866636"},"source":["import matplotlib.pyplot as plt\n","import numpy as np\n","x1=np.linspace(-5,5,100)\n","m=round(m,2)\n","c=round(c,2)\n","y1=m*x1+c\n","plt.plot(x1,y1,'-r',label='y='+str(m)+'x+'+str(c))\n","plt.title('Graph of '+'y='+str(m)+'x+'+str(c))\n","plt.xlabel('x',color='#1C2833')\n","plt.ylabel('y',color='#1C2833')\n","plt.legend(loc='upper left')\n","plt.grid()\n","plt.show()"],"execution_count":4,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4jOyWxXnb04V","executionInfo":{"status":"ok","timestamp":1616508850869,"user_tz":-330,"elapsed":1093,"user":{"displayName":"srinayani 29","photoUrl":"","userId":"08837727420127592366"}},"outputId":"eca56fae-9924-48d6-a5ef-13f7a37b393c"},"source":["yp=[]\n","for i in range(len(x)):\n","  p=(m*x[i])+c\n","  yp.append(p)\n","print(\"Predicted values (yp) : \",yp)\n","sum=0\n","for i in range(len(x)):\n","  sum+=(y[i]-yp[i])**2\n","  mse=sum/len(x)\n","print(\"Mean Square Error : \",mse)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Predicted values (yp) :  [2.8120000000000003, 3.4440000000000004, 4.0760000000000005, 4.708]\n","Mean Square Error :  0.08087999999999998\n"],"name":"stdout"}]}]}